# -*- coding: utf-8 -*-
"""covid_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1487rvTz0bD25fQNeXabtCKNHUykbeFtZ
"""

!pip install -q kaggle

from google.colab import files

files.upload()

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/

! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets list

!kaggle datasets download -d "tawsifurrahman/covid19-radiography-database"

! unzip covid19-radiography-database.zip -d covid19-radiography-database

from tensorflow.keras.layers import Dense,Conv2D,Flatten,MaxPooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
import numpy as np
import glob as glob

image_size =[224,224]

vgg19 = VGG19(input_shape = image_size+[3],weights='imagenet',include_top=False)

for layer in vgg19.layers:
    layer.trainable=False

from glob import glob
floder = glob('covid19-radiography-database/COVID-19_Radiography_Dataset/*')

floder

x = Flatten()(vgg19.output)
x1 = Dense(4,activation = 'softmax')(x)
model = Model(inputs = vgg19.input,outputs = x1)

model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy'])

datagen = ImageDataGenerator(rescale=1./255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2)

train_generator = datagen.flow_from_directory(
    'covid19-radiography-database/COVID-19_Radiography_Dataset',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'categorical',
     subset='training')

validation_generator = datagen.flow_from_directory(
    'covid19-radiography-database/COVID-19_Radiography_Dataset',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'categorical',
    subset='validation')

import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

h = model.fit(
    train_generator,
    steps_per_epoch = train_generator.samples // 32,
    validation_data = validation_generator, 
    validation_steps = validation_generator.samples // 32,
    epochs = 50)

"""import matplotlib.pyplot as plt
plt.plot(h.history['loss'], label='train loss')
plt.plot(h.history['val_loss'], label='val loss')
plt.plot(h.history['accuracy'], label='train acc')
plt.plot(h.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('loss_acc')"""
plt.boxplot(h.history['loss'])
plt.boxplot(h.history['val_loss'])
plt.boxplot(h.history['accuracy'])
plt.boxplot(h.history['val_accuracy'])
plt.legend()
plt.show()
plt.savefig('box_plot')
"""
plt.plot(h.history['accuracy'], label='train acc')
plt.plot(h.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')"""

from tensorflow.keras.models import load_model
model.save('lung_analysis.h5')
print("loaded")

"""# New Section"""

